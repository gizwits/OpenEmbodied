from PIL import Image
import numpy as np
import os

def convert_png_to_lvgl_rgb565(png_path, output_path, var_name="mouth_open_img"):
    """Convert PNG to LVGL v9 lv_image_dsc_t with RGB565 pixel data.

    - Keeps original image size
    - Little-endian RGB565 output (low byte first), as expected by LVGL
    - No alpha channel; transparent pixels will be flattened to RGB
    """
    img = Image.open(png_path).convert('RGB')
    width, height = img.size
    pixels = np.array(img, dtype=np.uint8)  # shape: (h, w, 3)

    # Pack to RGB565 little-endian
    r = (pixels[:, :, 0] >> 3).astype(np.uint16)
    g = (pixels[:, :, 1] >> 2).astype(np.uint16)
    b = (pixels[:, :, 2] >> 3).astype(np.uint16)
    rgb565 = (r << 11) | (g << 5) | b  # uint16

    low = (rgb565 & 0xFF).astype(np.uint8)
    high = ((rgb565 >> 8) & 0xFF).astype(np.uint8)
    interleaved = np.stack([low, high], axis=-1).reshape(-1)

    # Format C array
    c_bytes = ','.join(f"0x{byte:02x}" for byte in interleaved.tolist())
    stride = width * 2
    data_size = width * height * 2

    c_code = f"""// Auto-generated by png_to_lvgl.py (RGB565)
#include <lvgl.h>
static const uint8_t {var_name}_map[] = {{
    {c_bytes}
}};

const lv_image_dsc_t {var_name} = {{
  .header = {{
    .magic = LV_IMAGE_HEADER_MAGIC,
    .cf = LV_COLOR_FORMAT_RGB565,
    .flags = 0,
    .w = {width},
    .h = {height},
    .stride = {stride},
  }},
  .data_size = {data_size},
  .data = {var_name}_map,
}};
"""
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(c_code)
    print(f"转换完成！输出文件：{output_path} ({width}x{height}, RGB565)")

def convert_png_to_lvgl_alpha8(png_path, output_path, var_name="spiral_img_64"):
    img = Image.open(png_path).convert('RGBA').resize((80, 80), Image.BICUBIC)
    pixels = np.array(img)
    # 只用alpha通道
    alpha = pixels[:, :, 3]
    c_array = []
    for row in alpha:
        for pixel in row:
            c_array.append(f"0x{pixel:02x}")
    c_code = f"""// 自动生成的螺旋图像数据
#include <lvgl.h>
static const uint8_t spiral_map64[] = {{
    {', '.join(c_array)}
}};

const lv_img_dsc_t {var_name} = {{
    .header = {{
        .cf = LV_COLOR_FORMAT_A8,
        .w = 80,
        .h = 80,
    }},
    .data_size = sizeof(spiral_map64),
    .data = spiral_map64,
}};
"""
    with open(output_path, 'w') as f:
        f.write(c_code)
    print(f"转换完成！输出文件：{output_path}")

def convert_png_to_lvgl_rgb565a8(png_path, output_path, var_name="mouth_open_img"):
    """Convert PNG (with alpha) to LVGL v9 RGB565A8 (interleaved RGB565 + A8).

    Layout per pixel: [RGB565 little-endian (2 bytes), A8 (1 byte)] => 3 bytes/pixel
    Stride: width * 3
    """
    img = Image.open(png_path).convert('RGBA')
    width, height = img.size
    pixels = np.array(img, dtype=np.uint8)  # (h, w, 4) RGBA

    # RGB565
    r = (pixels[:, :, 0] >> 3).astype(np.uint16)
    g = (pixels[:, :, 1] >> 2).astype(np.uint16)
    b = (pixels[:, :, 2] >> 3).astype(np.uint16)
    rgb565 = (r << 11) | (g << 5) | b
    low = (rgb565 & 0xFF).astype(np.uint8)
    high = (rgb565 >> 8).astype(np.uint8)

    # Alpha
    a = pixels[:, :, 3].astype(np.uint8)

    # Interleave: low, high, alpha
    interleaved = np.stack([low, high, a], axis=-1).reshape(-1)

    c_bytes = ','.join(f"0x{byte:02x}" for byte in interleaved.tolist())
    stride = width * 3
    data_size = width * height * 3

    c_code = f"""// Auto-generated by png_to_lvgl.py (RGB565A8)
#include <lvgl.h>
static const uint8_t {var_name}_map[] = {{
    {c_bytes}
}};

const lv_image_dsc_t {var_name} = {{
  .header = {{
    .magic = LV_IMAGE_HEADER_MAGIC,
    .cf = LV_COLOR_FORMAT_RGB565A8,
    .flags = 0,
    .w = {width},
    .h = {height},
    .stride = {stride},
  }},
  .data_size = {data_size},
  .data = {var_name}_map,
}};
"""
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(c_code)
    print(f"转换完成！输出文件：{output_path} ({width}x{height}, RGB565A8)")

def convert_png_to_lvgl_argb8888(png_path, output_path, var_name="mouth_open_img"):
    """Convert PNG (with alpha) to LVGL v9 ARGB8888 (A,R,G,B per pixel)."""
    img = Image.open(png_path).convert('RGBA')
    width, height = img.size
    pixels = np.array(img, dtype=np.uint8)  # (h, w, 4) RGBA

    # Reorder to ARGB (A,R,G,B)
    a = pixels[:, :, 3]
    r = pixels[:, :, 0]
    g = pixels[:, :, 1]
    b = pixels[:, :, 2]
    argb = np.stack([a, r, g, b], axis=-1).reshape(-1)

    c_bytes = ','.join(f"0x{byte:02x}" for byte in argb.tolist())
    stride = width * 4
    data_size = width * height * 4

    c_code = f"""// Auto-generated by png_to_lvgl.py (ARGB8888)
#include <lvgl.h>
static const uint8_t {var_name}_map[] = {{
    {c_bytes}
}};

const lv_image_dsc_t {var_name} = {{
  .header = {{
    .magic = LV_IMAGE_HEADER_MAGIC,
    .cf = LV_COLOR_FORMAT_ARGB8888,
    .flags = 0,
    .w = {width},
    .h = {height},
    .stride = {stride},
  }},
  .data_size = {data_size},
  .data = {var_name}_map,
}};
"""
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(c_code)
    print(f"转换完成！输出文件：{output_path} ({width}x{height}, ARGB8888)")

if __name__ == "__main__":
    png_path = input("请输入PNG图片路径: ")
    output_path = input("请输入输出文件路径 (例如: spiral_image.h): ")
    convert_png_to_lvgl_alpha8(png_path, output_path)